@inject IAzureDevOpsService _azureDevOpsService

<Card Image="laptop.png" Title="Active pull requests">
    @if (_myActivePullRequests is null)
    {
        <h4>...</h4>
        <p class="m-0">...</p>
    }
    else
    {
        <h4>@_myActivePullRequests.Count() active pull request(s)</h4>
        @foreach (var pullRequest in _myActivePullRequests)
        {
            <a class="text-decoration-none text-dark" href="@pullRequest.WebUrl">
                <div class="p-2 rounded-lg border mt-2">
                    <p class="m-0 text-truncate"><b>@pullRequest.title</b></p>
                    <img src="@pullRequest.createdBy._links.avatar.href" width="30" height="30" class="d-inline-block border align-top rounded-circle" />
                    <small class="text-truncate">Created by @pullRequest.createdBy.displayName, @pullRequest.creationDate in @pullRequest.repository.name</small>
                    <small>Status: @pullRequest.status</small>
                    <small>Merge Status: @pullRequest.mergeStatus</small>
                    <small>Reviewed by: @(string.Join(", ", (pullRequest.reviewers ?? Enumerable.Empty<PullRequest.Reviewer>()).Select(r => r.displayName)))</small>
                </div>
            </a>
        }
    }
</Card>

@code {
    private IEnumerable<PullRequest> _myActivePullRequests;

    protected override async Task OnInitializedAsync()
    {
        _myActivePullRequests = await _azureDevOpsService.FetchAllPullRequests();
    }
}
